{"name": "test_user_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=124.0.6367.119)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7D6901572+60802]\n\t(No symbol) [0x00007FF7D687AC72]\n\t(No symbol) [0x00007FF7D6737B13]\n\t(No symbol) [0x00007FF7D6788052]\n\t(No symbol) [0x00007FF7D677AE8B]\n\t(No symbol) [0x00007FF7D67AAB7A]\n\t(No symbol) [0x00007FF7D677A7C6]\n\t(No symbol) [0x00007FF7D67AAD90]\n\t(No symbol) [0x00007FF7D67CA224]\n\t(No symbol) [0x00007FF7D67AA923]\n\t(No symbol) [0x00007FF7D6778FEC]\n\t(No symbol) [0x00007FF7D6779C21]\n\tGetHandleVerifier [0x00007FF7D6C0420D+3217949]\n\tGetHandleVerifier [0x00007FF7D6C461A7+3488183]\n\tGetHandleVerifier [0x00007FF7D6C3F12F+3459391]\n\tGetHandleVerifier [0x00007FF7D69BB936+823622]\n\t(No symbol) [0x00007FF7D688600F]\n\t(No symbol) [0x00007FF7D6880F34]\n\t(No symbol) [0x00007FF7D68810C2]\n\t(No symbol) [0x00007FF7D6871914]\n\tBaseThreadInitThunk [0x00007FFAD400257D+29]\n\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]", "trace": "def test_user_flow():\n        # Initialize the WebDriver (change the driver path as needed)\n        driver = webdriver.Chrome()\n    \n        try:\n>           execute_test_with_maximized_screen(driver)\n\nezi_backend_automation\\test_partner_automation.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nezi_backend_automation\\test_partner_automation.py:71: in execute_test_with_maximized_screen\n    click_service_drawer=driver.find_element(By.XPATH,\"//select[@name='servicename[]']\").click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001BA4F4B5C10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF7D6871914]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD400257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=124.0.6367.119)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7D6901572+60802]\nE       \t(No symbol) [0x00007FF7D687AC72]\nE       \t(No symbol) [0x00007FF7D6737B13]\nE       \t(No symbol) [0x00007FF7D6788052]\nE       \t(No symbol) [0x00007FF7D677AE8B]\nE       \t(No symbol) [0x00007FF7D67AAB7A]\nE       \t(No symbol) [0x00007FF7D677A7C6]\nE       \t(No symbol) [0x00007FF7D67AAD90]\nE       \t(No symbol) [0x00007FF7D67CA224]\nE       \t(No symbol) [0x00007FF7D67AA923]\nE       \t(No symbol) [0x00007FF7D6778FEC]\nE       \t(No symbol) [0x00007FF7D6779C21]\nE       \tGetHandleVerifier [0x00007FF7D6C0420D+3217949]\nE       \tGetHandleVerifier [0x00007FF7D6C461A7+3488183]\nE       \tGetHandleVerifier [0x00007FF7D6C3F12F+3459391]\nE       \tGetHandleVerifier [0x00007FF7D69BB936+823622]\nE       \t(No symbol) [0x00007FF7D688600F]\nE       \t(No symbol) [0x00007FF7D6880F34]\nE       \t(No symbol) [0x00007FF7D68810C2]\nE       \t(No symbol) [0x00007FF7D6871914]\nE       \tBaseThreadInitThunk [0x00007FFAD400257D+29]\nE       \tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "siteload", "source": "5321923f-c187-44ad-b5ac-90ad5a1c2caa-attachment.png", "type": "image/png"}, {"name": "click_login_button", "source": "49229d62-495d-415d-8f95-4f42db73cb54-attachment.png", "type": "image/png"}, {"name": "email and password", "source": "a5443b62-4807-4a20-a2f5-12ae0e647e95-attachment.png", "type": "image/png"}, {"name": "after login", "source": "63cbaa36-15a9-45fa-84ae-8d4569321aa0-attachment.png", "type": "image/png"}, {"name": "click_employee drawer", "source": "d4d94e27-f3a6-4a3c-af16-779df2013148-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "f1ff1d65-d393-4dac-92c2-4bfc7b4fe338-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "201190ae-a0ea-413d-bddc-426ff447b001-attachment.png", "type": "image/png"}, {"name": "Month date select", "source": "e73998db-a66d-4e6b-b84b-a4bbca98531a-attachment.png", "type": "image/png"}, {"name": "click_user_drawer", "source": "aaf28dc1-2af8-4989-b212-45fe70a57204-attachment.png", "type": "image/png"}, {"name": "select_user_name", "source": "dddb570c-974f-4d28-b572-3f21c16b7329-attachment.png", "type": "image/png"}], "start": 1715177293395, "stop": 1715177346775, "uuid": "14f078af-ec09-426e-ac30-bba80ef2b93e", "historyId": "ee5cea4a028037182ab0a7631ade7d95", "testCaseId": "ee5cea4a028037182ab0a7631ade7d95", "fullName": "ezi_backend_automation.test_partner_automation#test_user_flow", "labels": [{"name": "parentSuite", "value": "ezi_backend_automation"}, {"name": "suite", "value": "test_partner_automation"}, {"name": "host", "value": "Ravi"}, {"name": "thread", "value": "8440-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ezi_backend_automation.test_partner_automation"}]}
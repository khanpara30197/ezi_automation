{"name": "test_user_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[normalize-space()='15:30']\"}\n  (Session info: chrome=124.0.6367.201); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF617311562+60802]\n\t(No symbol) [0x00007FF61728AC62]\n\t(No symbol) [0x00007FF617147CE4]\n\t(No symbol) [0x00007FF617196D4D]\n\t(No symbol) [0x00007FF617196E1C]\n\t(No symbol) [0x00007FF6171DCE37]\n\t(No symbol) [0x00007FF6171BABBF]\n\t(No symbol) [0x00007FF6171DA224]\n\t(No symbol) [0x00007FF6171BA923]\n\t(No symbol) [0x00007FF617188FEC]\n\t(No symbol) [0x00007FF617189C21]\n\tGetHandleVerifier [0x00007FF6176141FD+3217949]\n\tGetHandleVerifier [0x00007FF617656197+3488183]\n\tGetHandleVerifier [0x00007FF61764F11F+3459391]\n\tGetHandleVerifier [0x00007FF6173CB926+823622]\n\t(No symbol) [0x00007FF617295FFF]\n\t(No symbol) [0x00007FF617290F24]\n\t(No symbol) [0x00007FF6172910B2]\n\t(No symbol) [0x00007FF617281904]\n\tBaseThreadInitThunk [0x00007FFAD400257D+29]\n\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]", "trace": "def test_user_flow():\n        # Initialize the WebDriver (change the driver path as needed)\n        driver = webdriver.Chrome()\n    \n        try:\n>           execute_test_with_maximized_screen(driver)\n\nezi_front_end_automation\\test_without_login_process.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nezi_front_end_automation\\test_without_login_process.py:77: in execute_test_with_maximized_screen\n    select_time = driver.find_element(By.XPATH, \"//a[normalize-space()='15:30']\")\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023226FE6610>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF617281904]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD400257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[normalize-space()='15:30']\"}\nE         (Session info: chrome=124.0.6367.201); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF617311562+60802]\nE       \t(No symbol) [0x00007FF61728AC62]\nE       \t(No symbol) [0x00007FF617147CE4]\nE       \t(No symbol) [0x00007FF617196D4D]\nE       \t(No symbol) [0x00007FF617196E1C]\nE       \t(No symbol) [0x00007FF6171DCE37]\nE       \t(No symbol) [0x00007FF6171BABBF]\nE       \t(No symbol) [0x00007FF6171DA224]\nE       \t(No symbol) [0x00007FF6171BA923]\nE       \t(No symbol) [0x00007FF617188FEC]\nE       \t(No symbol) [0x00007FF617189C21]\nE       \tGetHandleVerifier [0x00007FF6176141FD+3217949]\nE       \tGetHandleVerifier [0x00007FF617656197+3488183]\nE       \tGetHandleVerifier [0x00007FF61764F11F+3459391]\nE       \tGetHandleVerifier [0x00007FF6173CB926+823622]\nE       \t(No symbol) [0x00007FF617295FFF]\nE       \t(No symbol) [0x00007FF617290F24]\nE       \t(No symbol) [0x00007FF6172910B2]\nE       \t(No symbol) [0x00007FF617281904]\nE       \tBaseThreadInitThunk [0x00007FFAD400257D+29]\nE       \tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException"}, "attachments": [{"name": "siteload", "source": "705dac82-9483-438f-b956-bc17bcdfc1c5-attachment.png", "type": "image/png"}, {"name": "search salon", "source": "72a2f6ae-f1aa-4249-8f61-d42cb73e0125-attachment.png", "type": "image/png"}, {"name": "search name", "source": "20118813-f72d-4996-b8c3-e59bf4f04d35-attachment.png", "type": "image/png"}, {"name": "redirect to search page", "source": "196cc364-3234-4fe3-bdc5-4f2c042ba8a5-attachment.png", "type": "image/png"}, {"name": "haircut reserver button click", "source": "60b3d123-664b-4359-ac9f-3bd38fef7aa3-attachment.png", "type": "image/png"}, {"name": "professional click", "source": "f85f530f-856a-4fa1-adf0-7f8c25fbf22b-attachment.png", "type": "image/png"}, {"name": "select professional name", "source": "dcf98e46-5ce8-4680-adf3-0ce7296a4303-attachment.png", "type": "image/png"}, {"name": "click_add_a_service_afterwards", "source": "73b6d70f-71fe-4173-9a86-0932bd1d2405-attachment.png", "type": "image/png"}, {"name": "select_another_service", "source": "97d97691-3dd6-44c0-a300-8b4b0d33009c-attachment.png", "type": "image/png"}, {"name": "select_category_option", "source": "71aa3efa-74b3-4d3c-a699-7636d3f1db1d-attachment.png", "type": "image/png"}, {"name": "select_face_clean_shave", "source": "c8db3bb0-2668-431c-8333-e9d0c69ab3c0-attachment.png", "type": "image/png"}, {"name": "select_date", "source": "8a774372-4e31-4cfb-b85e-ff70dba1d51c-attachment.png", "type": "image/png"}], "start": 1715621555387, "stop": 1715621601709, "uuid": "d7937ab1-e816-4ddc-9761-80659299ab64", "historyId": "d12bc6f2e117f535432e26d9b7393386", "testCaseId": "d12bc6f2e117f535432e26d9b7393386", "fullName": "ezi_front_end_automation.test_without_login_process#test_user_flow", "labels": [{"name": "parentSuite", "value": "ezi_front_end_automation"}, {"name": "suite", "value": "test_without_login_process"}, {"name": "host", "value": "Ravi"}, {"name": "thread", "value": "25220-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ezi_front_end_automation.test_without_login_process"}]}
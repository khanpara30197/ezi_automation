{"name": "test_user_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":60,\"value\":\"[object HTMLButtonElement] has no size and location\"}\n  (Session info: chrome=124.0.6367.201)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7819E1562+60802]\n\t(No symbol) [0x00007FF78195AC62]\n\t(No symbol) [0x00007FF781817CE4]\n\t(No symbol) [0x00007FF78181DE26]\n\t(No symbol) [0x00007FF7818201DB]\n\t(No symbol) [0x00007FF781820280]\n\t(No symbol) [0x00007FF78186DC9D]\n\t(No symbol) [0x00007FF78186CF56]\n\t(No symbol) [0x00007FF7818B430B]\n\t(No symbol) [0x00007FF78188AB7A]\n\t(No symbol) [0x00007FF7818AA224]\n\t(No symbol) [0x00007FF78188A923]\n\t(No symbol) [0x00007FF781858FEC]\n\t(No symbol) [0x00007FF781859C21]\n\tGetHandleVerifier [0x00007FF781CE41FD+3217949]\n\tGetHandleVerifier [0x00007FF781D26197+3488183]\n\tGetHandleVerifier [0x00007FF781D1F11F+3459391]\n\tGetHandleVerifier [0x00007FF781A9B926+823622]\n\t(No symbol) [0x00007FF781965FFF]\n\t(No symbol) [0x00007FF781960F24]\n\t(No symbol) [0x00007FF7819610B2]\n\t(No symbol) [0x00007FF781951904]\n\tBaseThreadInitThunk [0x00007FFAD400257D+29]\n\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]", "trace": "def test_user_flow():\n        # Initialize the WebDriver (change the driver path as needed)\n        driver = webdriver.Chrome()\n    \n        try:\n>           execute_test_with_maximized_screen(driver)\n\nezi_backend_automation\\test_partner_automation.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nezi_backend_automation\\test_partner_automation.py:198: in execute_test_with_maximized_screen\n    ActionChains(driver).click(click_schedules_tab).perform()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020479121710>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: {\\\\\"status\\\\\":60,\\\\\"value\\...07FF781951904]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD400257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":60,\"value\":\"[object HTMLButtonElement] has no size and location\"}\nE         (Session info: chrome=124.0.6367.201)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7819E1562+60802]\nE       \t(No symbol) [0x00007FF78195AC62]\nE       \t(No symbol) [0x00007FF781817CE4]\nE       \t(No symbol) [0x00007FF78181DE26]\nE       \t(No symbol) [0x00007FF7818201DB]\nE       \t(No symbol) [0x00007FF781820280]\nE       \t(No symbol) [0x00007FF78186DC9D]\nE       \t(No symbol) [0x00007FF78186CF56]\nE       \t(No symbol) [0x00007FF7818B430B]\nE       \t(No symbol) [0x00007FF78188AB7A]\nE       \t(No symbol) [0x00007FF7818AA224]\nE       \t(No symbol) [0x00007FF78188A923]\nE       \t(No symbol) [0x00007FF781858FEC]\nE       \t(No symbol) [0x00007FF781859C21]\nE       \tGetHandleVerifier [0x00007FF781CE41FD+3217949]\nE       \tGetHandleVerifier [0x00007FF781D26197+3488183]\nE       \tGetHandleVerifier [0x00007FF781D1F11F+3459391]\nE       \tGetHandleVerifier [0x00007FF781A9B926+823622]\nE       \t(No symbol) [0x00007FF781965FFF]\nE       \t(No symbol) [0x00007FF781960F24]\nE       \t(No symbol) [0x00007FF7819610B2]\nE       \t(No symbol) [0x00007FF781951904]\nE       \tBaseThreadInitThunk [0x00007FFAD400257D+29]\nE       \tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: JavascriptException"}, "attachments": [{"name": "siteload", "source": "509c3ea7-916c-45d5-8087-e3a99bc8e4fa-attachment.png", "type": "image/png"}, {"name": "click_login_button", "source": "a84efbbb-a386-4e47-b7eb-0daa7dbac682-attachment.png", "type": "image/png"}, {"name": "email and password", "source": "7b0f5a4a-dd38-429a-8b5f-e7aa8b60beb2-attachment.png", "type": "image/png"}, {"name": "after login", "source": "b0627896-66dd-48d4-9ee9-7595032ac1ea-attachment.png", "type": "image/png"}, {"name": "click_employee drawer", "source": "8dfb7de3-afcc-4b29-a6d3-a225465712e1-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "67c96ee5-f972-47c6-936c-15954ae48086-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "0e2a9546-6c86-4305-8bf6-3ce700e5bf96-attachment.png", "type": "image/png"}, {"name": "click_customer_button", "source": "499bc3fd-c135-48d4-b78b-5c87a9ae77d3-attachment.png", "type": "image/png"}, {"name": "click_importer_button", "source": "4d7106e6-c5e4-4796-9fd6-c56bd46587cc-attachment.png", "type": "image/png"}, {"name": "click_download_button", "source": "d55dd6cb-0a79-4688-9b60-41abeb74a82d-attachment.png", "type": "image/png"}, {"name": "click_client button", "source": "80fad777-73a4-48ba-9350-808b9d060dfe-attachment.png", "type": "image/png"}, {"name": "search_partner_name", "source": "a3c192f0-e065-4c77-9117-7f2f48b63f99-attachment.png", "type": "image/png"}, {"name": "click_search_name", "source": "5e15802b-5f34-4cfc-88d6-a125b242e41b-attachment.png", "type": "image/png"}, {"name": " click_rendez_vous", "source": "0148b084-a9d5-4654-8b7d-ced64dcd87b8-attachment.png", "type": "image/png"}, {"name": "click_commenter", "source": "a32bef39-8700-4d8b-88f5-214b3aef5d77-attachment.png", "type": "image/png"}, {"name": "click_in_regards", "source": "1ea70599-e35b-4b3c-b949-959ada3d3733-attachment.png", "type": "image/png"}, {"name": "click_edit_customer_details", "source": "fded9b95-d4eb-474a-b921-a57d98c496db-attachment.png", "type": "image/png"}, {"name": "click_lastname_box", "source": "8c1e2376-0400-449f-a73d-6eea57768fcd-attachment.png", "type": "image/png"}, {"name": "click_date0fbirth_box", "source": "e7ac09bc-8f4f-4039-9587-28641fce9357-attachment.png", "type": "image/png"}, {"name": "click_profile_updatebutton", "source": "e81fdcc3-73b9-4887-a992-e2b407226235-attachment.png", "type": "image/png"}, {"name": "click_back_arrow", "source": "8c65e861-7c23-4d05-b230-a05e3c590492-attachment.png", "type": "image/png"}, {"name": "click_create_new_customer_icon", "source": "bcc2c589-188d-4215-a419-e8403b370bbc-attachment.png", "type": "image/png"}, {"name": "above details capture screenshort", "source": "4842dd0b-7895-4a98-b878-cd1e41e2bc21-attachment.png", "type": "image/png"}, {"name": "gendar select", "source": "e8cc0ff0-0622-4e12-9815-74e5ce225f49-attachment.png", "type": "image/png"}, {"name": "city select", "source": "6896888b-fe29-42c7-8d6d-d6e74b48473d-attachment.png", "type": "image/png"}, {"name": "additional information", "source": "0a520b46-e8bc-4bb5-99c2-d0423fee0bfb-attachment.png", "type": "image/png"}, {"name": "click_add_and_invite", "source": "5b0f29b3-7c5e-46a3-aba0-e94725475d0f-attachment.png", "type": "image/png"}, {"name": " click_staff_icon", "source": "1b03e19f-6b40-4842-8a08-10135b99c15a-attachment.png", "type": "image/png"}, {"name": "click_second_name", "source": "30412892-689b-4972-90b9-ae0ad5f6d4b8-attachment.png", "type": "image/png"}], "start": 1715513720126, "stop": 1715513821734, "uuid": "deaf2557-3faa-43af-9a2d-691fffc4a623", "historyId": "ee5cea4a028037182ab0a7631ade7d95", "testCaseId": "ee5cea4a028037182ab0a7631ade7d95", "fullName": "ezi_backend_automation.test_partner_automation#test_user_flow", "labels": [{"name": "parentSuite", "value": "ezi_backend_automation"}, {"name": "suite", "value": "test_partner_automation"}, {"name": "host", "value": "Ravi"}, {"name": "thread", "value": "21232-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ezi_backend_automation.test_partner_automation"}]}
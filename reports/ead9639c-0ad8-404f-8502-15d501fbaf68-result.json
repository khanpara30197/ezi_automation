{"name": "test_user_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: To submit an element, it must be nested inside a form element", "trace": "self = <selenium.webdriver.remote.webelement.WebElement (session=\"d20cbf4114d66e1d0af434707241d79f\", element=\"f.1AD6CF2789F0B43A128FB2C7ECEC114B.d.634EAF1BBD1DBD8DDE7000FBEDC6ADBB.e.235\")>\n\n    def submit(self) -> None:\n        \"\"\"Submits a form.\"\"\"\n        script = (\n            \"/* submitForm */var form = arguments[0];\\n\"\n            'while (form.nodeName != \"FORM\" && form.parentNode) {\\n'\n            \"  form = form.parentNode;\\n\"\n            \"}\\n\"\n            \"if (!form) { throw Error('Unable to find containing form element'); }\\n\"\n            \"if (!form.ownerDocument) { throw Error('Unable to find owning document'); }\\n\"\n            \"var e = form.ownerDocument.createEvent('Event');\\n\"\n            \"e.initEvent('submit', true, true);\\n\"\n            \"if (form.dispatchEvent(e)) { HTMLFormElement.prototype.submit.call(form) }\\n\"\n        )\n    \n        try:\n>           self._parent.execute_script(script, self)\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:407: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B3625AB8D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: Unable to find owning docu...07FF703A01904]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD400257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: Unable to find owning document\nE         (Session info: chrome=124.0.6367.201)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF703A91562+60802]\nE       \t(No symbol) [0x00007FF703A0AC62]\nE       \t(No symbol) [0x00007FF7038C7CE4]\nE       \t(No symbol) [0x00007FF7038CDE26]\nE       \t(No symbol) [0x00007FF7038D04F6]\nE       \t(No symbol) [0x00007FF70395AEC3]\nE       \t(No symbol) [0x00007FF70393AB7A]\nE       \t(No symbol) [0x00007FF70395A224]\nE       \t(No symbol) [0x00007FF70393A923]\nE       \t(No symbol) [0x00007FF703908FEC]\nE       \t(No symbol) [0x00007FF703909C21]\nE       \tGetHandleVerifier [0x00007FF703D941FD+3217949]\nE       \tGetHandleVerifier [0x00007FF703DD6197+3488183]\nE       \tGetHandleVerifier [0x00007FF703DCF11F+3459391]\nE       \tGetHandleVerifier [0x00007FF703B4B926+823622]\nE       \t(No symbol) [0x00007FF703A15FFF]\nE       \t(No symbol) [0x00007FF703A10F24]\nE       \t(No symbol) [0x00007FF703A110B2]\nE       \t(No symbol) [0x00007FF703A01904]\nE       \tBaseThreadInitThunk [0x00007FFAD400257D+29]\nE       \tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: JavascriptException\n\nThe above exception was the direct cause of the following exception:\n\n    def test_user_flow():\n        # Initialize the WebDriver (change the driver path as needed)\n        driver = webdriver.Chrome()\n    \n        try:\n>           execute_test_with_maximized_screen(driver)\n\nezi_backend_automation\\test_partner_automation.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nezi_backend_automation\\test_partner_automation.py:148: in execute_test_with_maximized_screen\n    click_profile_updatebutton=driver.find_element(By.CLASS_NAME,\"btn.btn-primary.Enregistrer_btn.bg-blue.profile_submit\").submit()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"d20cbf4114d66e1d0af434707241d79f\", element=\"f.1AD6CF2789F0B43A128FB2C7ECEC114B.d.634EAF1BBD1DBD8DDE7000FBEDC6ADBB.e.235\")>\n\n    def submit(self) -> None:\n        \"\"\"Submits a form.\"\"\"\n        script = (\n            \"/* submitForm */var form = arguments[0];\\n\"\n            'while (form.nodeName != \"FORM\" && form.parentNode) {\\n'\n            \"  form = form.parentNode;\\n\"\n            \"}\\n\"\n            \"if (!form) { throw Error('Unable to find containing form element'); }\\n\"\n            \"if (!form.ownerDocument) { throw Error('Unable to find owning document'); }\\n\"\n            \"var e = form.ownerDocument.createEvent('Event');\\n\"\n            \"e.initEvent('submit', true, true);\\n\"\n            \"if (form.dispatchEvent(e)) { HTMLFormElement.prototype.submit.call(form) }\\n\"\n        )\n    \n        try:\n            self._parent.execute_script(script, self)\n        except JavascriptException as exc:\n>           raise WebDriverException(\"To submit an element, it must be nested inside a form element\") from exc\nE           selenium.common.exceptions.WebDriverException: Message: To submit an element, it must be nested inside a form element\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:113: WebDriverException"}, "attachments": [{"name": "siteload", "source": "2da80fff-4b7c-4eb1-8fca-3c01b291be41-attachment.png", "type": "image/png"}, {"name": "click_login_button", "source": "cdc675f6-acc3-4e1d-be07-c65e69633a65-attachment.png", "type": "image/png"}, {"name": "email and password", "source": "08cd0422-3f92-4659-98c1-c0056b7dbea8-attachment.png", "type": "image/png"}, {"name": "after login", "source": "d269f9ec-a00a-4489-abe1-30d1345f8821-attachment.png", "type": "image/png"}, {"name": "click_employee drawer", "source": "161e2aee-ea50-4ada-855b-27a8da6110b0-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "21294cd1-0b66-435e-a8cb-04148c0ac603-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "bfd135a3-e2a3-430f-b5e6-06b322c98008-attachment.png", "type": "image/png"}, {"name": "click_customer_button", "source": "dacb3d22-acf7-41f0-90aa-e7ae9d29dc35-attachment.png", "type": "image/png"}, {"name": "click_importer_button", "source": "c673a899-386a-4a43-84f5-ca6b87d5ecb0-attachment.png", "type": "image/png"}, {"name": "click_download_button", "source": "ccf4e2b4-3620-48c4-832f-831fdc1d705e-attachment.png", "type": "image/png"}, {"name": "click_client button", "source": "a30d591e-df46-495b-a65a-51954cf2b9f9-attachment.png", "type": "image/png"}, {"name": "search_partner_name", "source": "e64cea1b-f688-4775-899d-a15894f4b69a-attachment.png", "type": "image/png"}, {"name": "click_search_name", "source": "8b8cc90c-c195-4724-a175-1c460965385b-attachment.png", "type": "image/png"}, {"name": " click_rendez_vous", "source": "e3ff0cfd-255c-4833-9af7-74f50d42b14b-attachment.png", "type": "image/png"}, {"name": "click_commenter", "source": "8bfffc26-9a81-4b6d-91c5-da981f17fa71-attachment.png", "type": "image/png"}, {"name": "click_in_regards", "source": "245ca5f9-c545-4cfb-951e-dbc9113107d9-attachment.png", "type": "image/png"}, {"name": "click_edit_customer_details", "source": "f8449740-65f5-49ec-b940-97afdceea973-attachment.png", "type": "image/png"}, {"name": "click_lastname_box", "source": "bbc59c19-0926-4ec6-97f0-8409de1765ca-attachment.png", "type": "image/png"}, {"name": "click_date0fbirth_box", "source": "d1583c6d-0656-408e-ae0e-1ddd3a6ca606-attachment.png", "type": "image/png"}], "start": 1715493912772, "stop": 1715493969571, "uuid": "1f480399-3c6f-411c-abca-5f6906778a2d", "historyId": "ee5cea4a028037182ab0a7631ade7d95", "testCaseId": "ee5cea4a028037182ab0a7631ade7d95", "fullName": "ezi_backend_automation.test_partner_automation#test_user_flow", "labels": [{"name": "parentSuite", "value": "ezi_backend_automation"}, {"name": "suite", "value": "test_partner_automation"}, {"name": "host", "value": "Ravi"}, {"name": "thread", "value": "12148-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ezi_backend_automation.test_partner_automation"}]}
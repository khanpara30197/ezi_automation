{"name": "test_user_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (294, 745)\n  (Session info: chrome=124.0.6367.119)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6B36F1572+60802]\n\t(No symbol) [0x00007FF6B366AC72]\n\t(No symbol) [0x00007FF6B3527CE4]\n\t(No symbol) [0x00007FF6B357E877]\n\t(No symbol) [0x00007FF6B357C344]\n\t(No symbol) [0x00007FF6B357980A]\n\t(No symbol) [0x00007FF6B35789E2]\n\t(No symbol) [0x00007FF6B356AE8B]\n\t(No symbol) [0x00007FF6B359AB7A]\n\t(No symbol) [0x00007FF6B356A7C6]\n\t(No symbol) [0x00007FF6B359AD90]\n\t(No symbol) [0x00007FF6B35BA224]\n\t(No symbol) [0x00007FF6B359A923]\n\t(No symbol) [0x00007FF6B3568FEC]\n\t(No symbol) [0x00007FF6B3569C21]\n\tGetHandleVerifier [0x00007FF6B39F420D+3217949]\n\tGetHandleVerifier [0x00007FF6B3A361A7+3488183]\n\tGetHandleVerifier [0x00007FF6B3A2F12F+3459391]\n\tGetHandleVerifier [0x00007FF6B37AB936+823622]\n\t(No symbol) [0x00007FF6B367600F]\n\t(No symbol) [0x00007FF6B3670F34]\n\t(No symbol) [0x00007FF6B36710C2]\n\t(No symbol) [0x00007FF6B3661914]\n\tBaseThreadInitThunk [0x00007FFAD400257D+29]\n\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]", "trace": "def test_user_flow():\n        # Initialize the WebDriver (change the driver path as needed)\n        driver = webdriver.Chrome()\n    \n        try:\n>           execute_test_with_maximized_screen(driver)\n\nezi_backend_automation\\test_partner_automation.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nezi_backend_automation\\test_partner_automation.py:147: in execute_test_with_maximized_screen\n    click_gender=driver.find_element(By.XPATH,\"//select[@name='gender']\").click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024CCFED3B90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6B3661914]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD400257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (294, 745)\nE         (Session info: chrome=124.0.6367.119)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6B36F1572+60802]\nE       \t(No symbol) [0x00007FF6B366AC72]\nE       \t(No symbol) [0x00007FF6B3527CE4]\nE       \t(No symbol) [0x00007FF6B357E877]\nE       \t(No symbol) [0x00007FF6B357C344]\nE       \t(No symbol) [0x00007FF6B357980A]\nE       \t(No symbol) [0x00007FF6B35789E2]\nE       \t(No symbol) [0x00007FF6B356AE8B]\nE       \t(No symbol) [0x00007FF6B359AB7A]\nE       \t(No symbol) [0x00007FF6B356A7C6]\nE       \t(No symbol) [0x00007FF6B359AD90]\nE       \t(No symbol) [0x00007FF6B35BA224]\nE       \t(No symbol) [0x00007FF6B359A923]\nE       \t(No symbol) [0x00007FF6B3568FEC]\nE       \t(No symbol) [0x00007FF6B3569C21]\nE       \tGetHandleVerifier [0x00007FF6B39F420D+3217949]\nE       \tGetHandleVerifier [0x00007FF6B3A361A7+3488183]\nE       \tGetHandleVerifier [0x00007FF6B3A2F12F+3459391]\nE       \tGetHandleVerifier [0x00007FF6B37AB936+823622]\nE       \t(No symbol) [0x00007FF6B367600F]\nE       \t(No symbol) [0x00007FF6B3670F34]\nE       \t(No symbol) [0x00007FF6B36710C2]\nE       \t(No symbol) [0x00007FF6B3661914]\nE       \tBaseThreadInitThunk [0x00007FFAD400257D+29]\nE       \tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "siteload", "source": "c4b823e1-7ea0-41ae-bffb-e708b20ffe49-attachment.png", "type": "image/png"}, {"name": "click_login_button", "source": "f1547005-51db-47cb-a01a-d4e05814db57-attachment.png", "type": "image/png"}, {"name": "email and password", "source": "fd999a69-aa80-4bb0-87b5-c05bba2e059b-attachment.png", "type": "image/png"}, {"name": "after login", "source": "e0c9f824-e831-4604-917d-0e01952bbdf1-attachment.png", "type": "image/png"}, {"name": "click_employee drawer", "source": "7b8af924-9efc-4ed0-b348-bd8ebfa951c4-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "a2c63678-2c3f-4e8c-814a-466c8659368f-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "ee5e95c0-7488-400a-ab4b-acee1790ee23-attachment.png", "type": "image/png"}, {"name": "click_customer_button", "source": "67fed103-52e9-47c7-b9be-9d44bd7a6c0c-attachment.png", "type": "image/png"}, {"name": "click_importer_button", "source": "58bb476f-9655-49b9-b411-d0a750edc163-attachment.png", "type": "image/png"}, {"name": "click_download_button", "source": "6c988df1-72c2-4152-9eaf-ef79c585a9a5-attachment.png", "type": "image/png"}, {"name": "click_client button", "source": "b5e127df-1357-45f6-8d48-b1dba1802c73-attachment.png", "type": "image/png"}, {"name": "search_partner_name", "source": "faa3e34a-cfd4-480f-915a-db35d2caa7d5-attachment.png", "type": "image/png"}, {"name": "click_search_name", "source": "05c94efc-bc4a-457a-b904-c905f2a8d50f-attachment.png", "type": "image/png"}, {"name": " click_rendez_vous", "source": "0c508d5b-6e38-4da6-a705-07c1a22cb053-attachment.png", "type": "image/png"}, {"name": "click_commenter", "source": "76b32bdd-04a6-4407-a8dc-ee74a305af67-attachment.png", "type": "image/png"}, {"name": "click_in_regards", "source": "1e845369-9934-4ac0-9d5b-0e0db3ca258b-attachment.png", "type": "image/png"}, {"name": "click_create_new_customer_icon", "source": "8fd00442-360c-4b9a-8893-b1f7301c7b4a-attachment.png", "type": "image/png"}, {"name": "above details capture screenshort", "source": "bc910c5f-4045-4d7f-b2fd-f0f239a4228b-attachment.png", "type": "image/png"}], "start": 1715245215557, "stop": 1715245267651, "uuid": "7778e661-85d0-4651-ad14-1cac318a08f6", "historyId": "ee5cea4a028037182ab0a7631ade7d95", "testCaseId": "ee5cea4a028037182ab0a7631ade7d95", "fullName": "ezi_backend_automation.test_partner_automation#test_user_flow", "labels": [{"name": "parentSuite", "value": "ezi_backend_automation"}, {"name": "suite", "value": "test_partner_automation"}, {"name": "host", "value": "Ravi"}, {"name": "thread", "value": "14024-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ezi_backend_automation.test_partner_automation"}]}
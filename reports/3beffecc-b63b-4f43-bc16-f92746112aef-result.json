{"name": "test_user_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (765, 950)\n  (Session info: chrome=124.0.6367.203)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6391C1522+60802]\n\t(No symbol) [0x00007FF63913AC22]\n\t(No symbol) [0x00007FF638FF7CE4]\n\t(No symbol) [0x00007FF63904E877]\n\t(No symbol) [0x00007FF63904C344]\n\t(No symbol) [0x00007FF63904980A]\n\t(No symbol) [0x00007FF6390489E2]\n\t(No symbol) [0x00007FF63903AE8B]\n\t(No symbol) [0x00007FF63906AB7A]\n\t(No symbol) [0x00007FF63903A7C6]\n\t(No symbol) [0x00007FF63906AD90]\n\t(No symbol) [0x00007FF63908A224]\n\t(No symbol) [0x00007FF63906A923]\n\t(No symbol) [0x00007FF639038FEC]\n\t(No symbol) [0x00007FF639039C21]\n\tGetHandleVerifier [0x00007FF6394C41BD+3217949]\n\tGetHandleVerifier [0x00007FF639506157+3488183]\n\tGetHandleVerifier [0x00007FF6394FF0DF+3459391]\n\tGetHandleVerifier [0x00007FF63927B8E6+823622]\n\t(No symbol) [0x00007FF639145FBF]\n\t(No symbol) [0x00007FF639140EE4]\n\t(No symbol) [0x00007FF639141072]\n\t(No symbol) [0x00007FF6391318C4]\n\tBaseThreadInitThunk [0x00007FFAD400257D+29]\n\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]", "trace": "def test_user_flow():\n        # Initialize the WebDriver (change the driver path as needed)\n        driver = webdriver.Chrome()\n    \n        try:\n>           execute_test_with_maximized_screen(driver)\n\nezi_front_end_automation\\test_without_login_process.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nezi_front_end_automation\\test_without_login_process.py:86: in execute_test_with_maximized_screen\n    click_login_button=driver.find_element(By.ID,\"hidealready\").click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029A3E5F01D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6391318C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD400257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (765, 950)\nE         (Session info: chrome=124.0.6367.203)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6391C1522+60802]\nE       \t(No symbol) [0x00007FF63913AC22]\nE       \t(No symbol) [0x00007FF638FF7CE4]\nE       \t(No symbol) [0x00007FF63904E877]\nE       \t(No symbol) [0x00007FF63904C344]\nE       \t(No symbol) [0x00007FF63904980A]\nE       \t(No symbol) [0x00007FF6390489E2]\nE       \t(No symbol) [0x00007FF63903AE8B]\nE       \t(No symbol) [0x00007FF63906AB7A]\nE       \t(No symbol) [0x00007FF63903A7C6]\nE       \t(No symbol) [0x00007FF63906AD90]\nE       \t(No symbol) [0x00007FF63908A224]\nE       \t(No symbol) [0x00007FF63906A923]\nE       \t(No symbol) [0x00007FF639038FEC]\nE       \t(No symbol) [0x00007FF639039C21]\nE       \tGetHandleVerifier [0x00007FF6394C41BD+3217949]\nE       \tGetHandleVerifier [0x00007FF639506157+3488183]\nE       \tGetHandleVerifier [0x00007FF6394FF0DF+3459391]\nE       \tGetHandleVerifier [0x00007FF63927B8E6+823622]\nE       \t(No symbol) [0x00007FF639145FBF]\nE       \t(No symbol) [0x00007FF639140EE4]\nE       \t(No symbol) [0x00007FF639141072]\nE       \t(No symbol) [0x00007FF6391318C4]\nE       \tBaseThreadInitThunk [0x00007FFAD400257D+29]\nE       \tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "siteload", "source": "15aa960d-27c9-4c6e-9d00-477e61bd716b-attachment.png", "type": "image/png"}, {"name": "search salon", "source": "732c0eb3-66a7-44d0-be51-55a535242245-attachment.png", "type": "image/png"}, {"name": "search name", "source": "39484afe-1eba-45ba-bb8e-6a28b9534b62-attachment.png", "type": "image/png"}, {"name": "redirect to search page", "source": "83673810-6cdb-4568-8f36-736fd261df8d-attachment.png", "type": "image/png"}, {"name": "haircut reserver button click", "source": "9d986862-619e-42be-aa29-b9c13e60a2a2-attachment.png", "type": "image/png"}, {"name": "professional click", "source": "4b5b1e27-68fe-420e-a8d3-24b478d2ed32-attachment.png", "type": "image/png"}, {"name": "select professional name", "source": "93a40061-3f85-4092-986c-93a5de68ecd2-attachment.png", "type": "image/png"}, {"name": "click_add_a_service_afterwards", "source": "db73f049-24af-4501-b986-361899c687c5-attachment.png", "type": "image/png"}, {"name": "select_another_service", "source": "f637fab1-1aed-48eb-8a27-03aa41045902-attachment.png", "type": "image/png"}, {"name": "select_category_option", "source": "0febae80-51ee-4855-a7ad-b75a06321335-attachment.png", "type": "image/png"}, {"name": "select_face_clean_shave", "source": "57a19971-3194-49fc-8b87-c0f727652fb0-attachment.png", "type": "image/png"}, {"name": "select_date", "source": "3cefc4b6-e44b-437a-a4a3-26d6f28410d6-attachment.png", "type": "image/png"}, {"name": "select_time", "source": "71be7a1f-7cff-488b-ae04-1191fdf405bb-attachment.png", "type": "image/png"}, {"name": "date modifier page", "source": "7c7cd639-185d-4ce1-a099-05441f13bcb3-attachment.png", "type": "image/png"}, {"name": "log", "source": "6b9f0bc3-4adf-4303-aa34-1ccb42306f66-attachment.txt", "type": "text/plain"}], "start": 1715706586857, "stop": 1715706754691, "uuid": "9785047d-9ed1-4741-aba1-de747c12a9a3", "historyId": "d12bc6f2e117f535432e26d9b7393386", "testCaseId": "d12bc6f2e117f535432e26d9b7393386", "fullName": "ezi_front_end_automation.test_without_login_process#test_user_flow", "labels": [{"name": "parentSuite", "value": "ezi_front_end_automation"}, {"name": "suite", "value": "test_without_login_process"}, {"name": "host", "value": "Ravi"}, {"name": "thread", "value": "9864-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ezi_front_end_automation.test_without_login_process"}]}
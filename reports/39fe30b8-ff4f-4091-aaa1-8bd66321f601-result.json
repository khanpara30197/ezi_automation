{"name": "test_user_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1424, -219)\n  (Session info: chrome=124.0.6367.201)\nStacktrace:\n\tGetHandleVerifier [0x00007FF703A91562+60802]\n\t(No symbol) [0x00007FF703A0AC62]\n\t(No symbol) [0x00007FF7038C7CE4]\n\t(No symbol) [0x00007FF70391E877]\n\t(No symbol) [0x00007FF70391C344]\n\t(No symbol) [0x00007FF70391980A]\n\t(No symbol) [0x00007FF7039189E2]\n\t(No symbol) [0x00007FF70390AE8B]\n\t(No symbol) [0x00007FF70393AB7A]\n\t(No symbol) [0x00007FF70390A7C6]\n\t(No symbol) [0x00007FF70393AD90]\n\t(No symbol) [0x00007FF70395A224]\n\t(No symbol) [0x00007FF70393A923]\n\t(No symbol) [0x00007FF703908FEC]\n\t(No symbol) [0x00007FF703909C21]\n\tGetHandleVerifier [0x00007FF703D941FD+3217949]\n\tGetHandleVerifier [0x00007FF703DD6197+3488183]\n\tGetHandleVerifier [0x00007FF703DCF11F+3459391]\n\tGetHandleVerifier [0x00007FF703B4B926+823622]\n\t(No symbol) [0x00007FF703A15FFF]\n\t(No symbol) [0x00007FF703A10F24]\n\t(No symbol) [0x00007FF703A110B2]\n\t(No symbol) [0x00007FF703A01904]\n\tBaseThreadInitThunk [0x00007FFAD400257D+29]\n\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]", "trace": "def test_user_flow():\n        # Initialize the WebDriver (change the driver path as needed)\n        driver = webdriver.Chrome()\n    \n        try:\n>           execute_test_with_maximized_screen(driver)\n\nezi_backend_automation\\test_partner_automation.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nezi_backend_automation\\test_partner_automation.py:148: in execute_test_with_maximized_screen\n    click_profile_updatebutton=driver.find_element(By.CLASS_NAME,\"btn.btn-primary.Enregistrer_btn.bg-blue.profile_submit\").click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002055C0253D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF703A01904]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD400257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1424, -219)\nE         (Session info: chrome=124.0.6367.201)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF703A91562+60802]\nE       \t(No symbol) [0x00007FF703A0AC62]\nE       \t(No symbol) [0x00007FF7038C7CE4]\nE       \t(No symbol) [0x00007FF70391E877]\nE       \t(No symbol) [0x00007FF70391C344]\nE       \t(No symbol) [0x00007FF70391980A]\nE       \t(No symbol) [0x00007FF7039189E2]\nE       \t(No symbol) [0x00007FF70390AE8B]\nE       \t(No symbol) [0x00007FF70393AB7A]\nE       \t(No symbol) [0x00007FF70390A7C6]\nE       \t(No symbol) [0x00007FF70393AD90]\nE       \t(No symbol) [0x00007FF70395A224]\nE       \t(No symbol) [0x00007FF70393A923]\nE       \t(No symbol) [0x00007FF703908FEC]\nE       \t(No symbol) [0x00007FF703909C21]\nE       \tGetHandleVerifier [0x00007FF703D941FD+3217949]\nE       \tGetHandleVerifier [0x00007FF703DD6197+3488183]\nE       \tGetHandleVerifier [0x00007FF703DCF11F+3459391]\nE       \tGetHandleVerifier [0x00007FF703B4B926+823622]\nE       \t(No symbol) [0x00007FF703A15FFF]\nE       \t(No symbol) [0x00007FF703A10F24]\nE       \t(No symbol) [0x00007FF703A110B2]\nE       \t(No symbol) [0x00007FF703A01904]\nE       \tBaseThreadInitThunk [0x00007FFAD400257D+29]\nE       \tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "siteload", "source": "b63eb6b9-4278-4324-973f-626f1af08820-attachment.png", "type": "image/png"}, {"name": "click_login_button", "source": "49976fc7-2143-4119-954b-3724929be8c8-attachment.png", "type": "image/png"}, {"name": "email and password", "source": "58079302-198e-4b50-be6a-4e50c098ffc8-attachment.png", "type": "image/png"}, {"name": "after login", "source": "42312c99-1684-46f5-884b-86b98bc34f00-attachment.png", "type": "image/png"}, {"name": "click_employee drawer", "source": "561ffc37-6f1a-4450-808a-f4bc7dc3f7c7-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "2bf82c13-0b31-4c83-9380-4000224326c4-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "d76a0ad2-351b-4851-a48c-f37256cd012f-attachment.png", "type": "image/png"}, {"name": "click_customer_button", "source": "6f9c88b7-2782-4ed6-8359-84397efc9d92-attachment.png", "type": "image/png"}, {"name": "click_importer_button", "source": "cc668aec-ec2d-4b0f-b830-ba01d5cf752d-attachment.png", "type": "image/png"}, {"name": "click_download_button", "source": "83b04f6b-1d99-44d8-97d3-a7995b4c3e0f-attachment.png", "type": "image/png"}, {"name": "click_client button", "source": "4a85ed44-0b9b-47e0-9d15-ae314d07b1d9-attachment.png", "type": "image/png"}, {"name": "search_partner_name", "source": "0b97c812-8947-4462-be93-d4106008efa3-attachment.png", "type": "image/png"}, {"name": "click_search_name", "source": "56eb5a03-6a58-4226-9d3e-9272d6b1502e-attachment.png", "type": "image/png"}, {"name": " click_rendez_vous", "source": "bdfa3614-01bd-4c39-a53b-702123bbc12b-attachment.png", "type": "image/png"}, {"name": "click_commenter", "source": "9c13f6b8-de0b-408e-bf27-f42a78666935-attachment.png", "type": "image/png"}, {"name": "click_in_regards", "source": "738ed5b4-df7f-4a63-9316-23996911ab2c-attachment.png", "type": "image/png"}, {"name": "click_edit_customer_details", "source": "b3401d43-e56c-451b-bc9c-05be518bb366-attachment.png", "type": "image/png"}, {"name": "click_lastname_box", "source": "9f00acb2-a7c3-4bf9-915d-eb7a0a3c7f82-attachment.png", "type": "image/png"}, {"name": "click_date0fbirth_box", "source": "f87a2090-7ab0-4659-8439-a2a007186eb8-attachment.png", "type": "image/png"}], "start": 1715493794567, "stop": 1715493864879, "uuid": "56aa53f7-06b4-483c-bcde-c16c8f9e09b5", "historyId": "ee5cea4a028037182ab0a7631ade7d95", "testCaseId": "ee5cea4a028037182ab0a7631ade7d95", "fullName": "ezi_backend_automation.test_partner_automation#test_user_flow", "labels": [{"name": "parentSuite", "value": "ezi_backend_automation"}, {"name": "suite", "value": "test_partner_automation"}, {"name": "host", "value": "Ravi"}, {"name": "thread", "value": "20456-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ezi_backend_automation.test_partner_automation"}]}
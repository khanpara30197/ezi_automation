{"name": "test_user_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=124.0.6367.203)\nStacktrace:\n\tGetHandleVerifier [0x00007FF725691522+60802]\n\t(No symbol) [0x00007FF72560AC22]\n\t(No symbol) [0x00007FF7254C7B13]\n\t(No symbol) [0x00007FF7255109F7]\n\t(No symbol) [0x00007FF72550EB1A]\n\t(No symbol) [0x00007FF72553AB7A]\n\t(No symbol) [0x00007FF72550A7C6]\n\t(No symbol) [0x00007FF72553AD90]\n\t(No symbol) [0x00007FF72555A224]\n\t(No symbol) [0x00007FF72553A923]\n\t(No symbol) [0x00007FF725508FEC]\n\t(No symbol) [0x00007FF725509C21]\n\tGetHandleVerifier [0x00007FF7259941BD+3217949]\n\tGetHandleVerifier [0x00007FF7259D6157+3488183]\n\tGetHandleVerifier [0x00007FF7259CF0DF+3459391]\n\tGetHandleVerifier [0x00007FF72574B8E6+823622]\n\t(No symbol) [0x00007FF725615FBF]\n\t(No symbol) [0x00007FF725610EE4]\n\t(No symbol) [0x00007FF725611072]\n\t(No symbol) [0x00007FF7256018C4]\n\tBaseThreadInitThunk [0x00007FFAD400257D+29]\n\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]", "trace": "def test_user_flow():\n        # Initialize the WebDriver (change the driver path as needed)\n        driver = webdriver.Chrome()\n    \n        try:\n>           execute_test_with_maximized_screen(driver)\n\nezi_front_end_automation\\test_without_login_process.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nezi_front_end_automation\\test_without_login_process.py:89: in execute_test_with_maximized_screen\n    click_email_filled = driver.find_element(By.NAME, \"email\").send_keys(\"khanpara30197@gmail.com\")\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in send_keys\n    self._execute(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001253FE6D550>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF7256018C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD400257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=124.0.6367.203)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF725691522+60802]\nE       \t(No symbol) [0x00007FF72560AC22]\nE       \t(No symbol) [0x00007FF7254C7B13]\nE       \t(No symbol) [0x00007FF7255109F7]\nE       \t(No symbol) [0x00007FF72550EB1A]\nE       \t(No symbol) [0x00007FF72553AB7A]\nE       \t(No symbol) [0x00007FF72550A7C6]\nE       \t(No symbol) [0x00007FF72553AD90]\nE       \t(No symbol) [0x00007FF72555A224]\nE       \t(No symbol) [0x00007FF72553A923]\nE       \t(No symbol) [0x00007FF725508FEC]\nE       \t(No symbol) [0x00007FF725509C21]\nE       \tGetHandleVerifier [0x00007FF7259941BD+3217949]\nE       \tGetHandleVerifier [0x00007FF7259D6157+3488183]\nE       \tGetHandleVerifier [0x00007FF7259CF0DF+3459391]\nE       \tGetHandleVerifier [0x00007FF72574B8E6+823622]\nE       \t(No symbol) [0x00007FF725615FBF]\nE       \t(No symbol) [0x00007FF725610EE4]\nE       \t(No symbol) [0x00007FF725611072]\nE       \t(No symbol) [0x00007FF7256018C4]\nE       \tBaseThreadInitThunk [0x00007FFAD400257D+29]\nE       \tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "siteload", "source": "f05441fc-91a6-42b5-a9f3-f649166d26e2-attachment.png", "type": "image/png"}, {"name": "search salon", "source": "17fe1d99-7c48-49eb-a9a1-d66a4f5263d2-attachment.png", "type": "image/png"}, {"name": "search name", "source": "97d607b9-f04d-41f1-89ac-9beb74e116d4-attachment.png", "type": "image/png"}, {"name": "redirect to search page", "source": "98571e4e-a019-4e35-8b36-91a2ac8d9b32-attachment.png", "type": "image/png"}, {"name": "haircut reserver button click", "source": "111554df-e166-487d-a9f9-c05d0a5bc3d0-attachment.png", "type": "image/png"}, {"name": "professional click", "source": "7386db54-7bc6-47c4-842e-bda17afc3d44-attachment.png", "type": "image/png"}, {"name": "select professional name", "source": "fa37ef53-da2e-4383-a3f7-8be8c6ab5fdf-attachment.png", "type": "image/png"}, {"name": "click_add_a_service_afterwards", "source": "469e9066-cae1-44c1-886a-290dad8a594a-attachment.png", "type": "image/png"}, {"name": "select_another_category", "source": "4be534f4-4496-4fd1-8e84-11b88e173d6b-attachment.png", "type": "image/png"}, {"name": "select_category", "source": "7567323b-cc89-43ef-bcbc-845e09c0fcf1-attachment.png", "type": "image/png"}, {"name": "select_category_option", "source": "fa26ead3-b3da-4aed-b389-be8560190075-attachment.png", "type": "image/png"}, {"name": "select_face_clean_shave", "source": "bda5d321-bc0e-4070-a30a-05748d25da1b-attachment.png", "type": "image/png"}, {"name": "select_date", "source": "edd4f218-c270-4f4a-9467-719fb323cab3-attachment.png", "type": "image/png"}, {"name": "select_time", "source": "f2da2d3c-3871-47dc-9981-e7b5f87c3934-attachment.png", "type": "image/png"}, {"name": "date modifier page", "source": "5458f513-e87b-4a5e-a776-49553276e3c4-attachment.png", "type": "image/png"}, {"name": "click_login_button", "source": "e25735f4-6748-4365-918d-85224e9fd828-attachment.png", "type": "image/png"}], "start": 1715708950535, "stop": 1715709077242, "uuid": "eaecf184-f2e1-424e-aae5-8c376b774447", "historyId": "d12bc6f2e117f535432e26d9b7393386", "testCaseId": "d12bc6f2e117f535432e26d9b7393386", "fullName": "ezi_front_end_automation.test_without_login_process#test_user_flow", "labels": [{"name": "parentSuite", "value": "ezi_front_end_automation"}, {"name": "suite", "value": "test_without_login_process"}, {"name": "host", "value": "Ravi"}, {"name": "thread", "value": "3408-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ezi_front_end_automation.test_without_login_process"}]}
{"name": "test_user_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (294, 748)\n  (Session info: chrome=124.0.6367.119)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6B36F1572+60802]\n\t(No symbol) [0x00007FF6B366AC72]\n\t(No symbol) [0x00007FF6B3527CE4]\n\t(No symbol) [0x00007FF6B357E877]\n\t(No symbol) [0x00007FF6B357C344]\n\t(No symbol) [0x00007FF6B357980A]\n\t(No symbol) [0x00007FF6B35789E2]\n\t(No symbol) [0x00007FF6B356AE8B]\n\t(No symbol) [0x00007FF6B359AB7A]\n\t(No symbol) [0x00007FF6B356A7C6]\n\t(No symbol) [0x00007FF6B359AD90]\n\t(No symbol) [0x00007FF6B35BA224]\n\t(No symbol) [0x00007FF6B359A923]\n\t(No symbol) [0x00007FF6B3568FEC]\n\t(No symbol) [0x00007FF6B3569C21]\n\tGetHandleVerifier [0x00007FF6B39F420D+3217949]\n\tGetHandleVerifier [0x00007FF6B3A361A7+3488183]\n\tGetHandleVerifier [0x00007FF6B3A2F12F+3459391]\n\tGetHandleVerifier [0x00007FF6B37AB936+823622]\n\t(No symbol) [0x00007FF6B367600F]\n\t(No symbol) [0x00007FF6B3670F34]\n\t(No symbol) [0x00007FF6B36710C2]\n\t(No symbol) [0x00007FF6B3661914]\n\tBaseThreadInitThunk [0x00007FFAD400257D+29]\n\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]", "trace": "def test_user_flow():\n        # Initialize the WebDriver (change the driver path as needed)\n        driver = webdriver.Chrome()\n    \n        try:\n>           execute_test_with_maximized_screen(driver)\n\nezi_backend_automation\\test_partner_automation.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nezi_backend_automation\\test_partner_automation.py:147: in execute_test_with_maximized_screen\n    click_gender=driver.find_element(By.XPATH,\"//select[@name='gender']\").click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A701560810>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6B3661914]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD400257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (294, 748)\nE         (Session info: chrome=124.0.6367.119)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6B36F1572+60802]\nE       \t(No symbol) [0x00007FF6B366AC72]\nE       \t(No symbol) [0x00007FF6B3527CE4]\nE       \t(No symbol) [0x00007FF6B357E877]\nE       \t(No symbol) [0x00007FF6B357C344]\nE       \t(No symbol) [0x00007FF6B357980A]\nE       \t(No symbol) [0x00007FF6B35789E2]\nE       \t(No symbol) [0x00007FF6B356AE8B]\nE       \t(No symbol) [0x00007FF6B359AB7A]\nE       \t(No symbol) [0x00007FF6B356A7C6]\nE       \t(No symbol) [0x00007FF6B359AD90]\nE       \t(No symbol) [0x00007FF6B35BA224]\nE       \t(No symbol) [0x00007FF6B359A923]\nE       \t(No symbol) [0x00007FF6B3568FEC]\nE       \t(No symbol) [0x00007FF6B3569C21]\nE       \tGetHandleVerifier [0x00007FF6B39F420D+3217949]\nE       \tGetHandleVerifier [0x00007FF6B3A361A7+3488183]\nE       \tGetHandleVerifier [0x00007FF6B3A2F12F+3459391]\nE       \tGetHandleVerifier [0x00007FF6B37AB936+823622]\nE       \t(No symbol) [0x00007FF6B367600F]\nE       \t(No symbol) [0x00007FF6B3670F34]\nE       \t(No symbol) [0x00007FF6B36710C2]\nE       \t(No symbol) [0x00007FF6B3661914]\nE       \tBaseThreadInitThunk [0x00007FFAD400257D+29]\nE       \tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "siteload", "source": "46606e38-13be-4927-a268-dbc95bbe40ca-attachment.png", "type": "image/png"}, {"name": "click_login_button", "source": "31b6cd2e-5bc3-4de9-ab01-3d961df6b748-attachment.png", "type": "image/png"}, {"name": "email and password", "source": "8f8e791d-d346-42f1-8c46-33e515ca4143-attachment.png", "type": "image/png"}, {"name": "after login", "source": "d9d47aef-db7b-4f33-a2db-1737e13423b3-attachment.png", "type": "image/png"}, {"name": "click_employee drawer", "source": "ad806d3a-1e7c-4b00-8c34-b4d05f8f39e2-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "2a58d2fe-ce71-46f6-a5fe-47f5f9696e92-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "0e39194f-f5e5-4ca7-bd57-64a53d913315-attachment.png", "type": "image/png"}, {"name": "click_customer_button", "source": "14f0c71b-2985-452a-a325-3eead9b7f9e2-attachment.png", "type": "image/png"}, {"name": "click_importer_button", "source": "e748716a-c269-45a0-9223-d59894039d07-attachment.png", "type": "image/png"}, {"name": "click_download_button", "source": "b1f5e206-3e9e-4f63-8727-9e35049a8724-attachment.png", "type": "image/png"}, {"name": "click_client button", "source": "8544f396-63a7-4ed1-af17-748465409ffe-attachment.png", "type": "image/png"}, {"name": "search_partner_name", "source": "80ec2a26-eedf-4dd3-8bee-b9c6cfc81e8a-attachment.png", "type": "image/png"}, {"name": "click_search_name", "source": "7d6ba074-6fb4-44cc-bb55-84d9247c1934-attachment.png", "type": "image/png"}, {"name": " click_rendez_vous", "source": "d10e3459-b705-42fa-8ce8-1ca02547085d-attachment.png", "type": "image/png"}, {"name": "click_commenter", "source": "94098f8d-d9c6-49f4-b656-90a293b9ecbb-attachment.png", "type": "image/png"}, {"name": "click_in_regards", "source": "18b9c867-12ee-4218-95a9-4909085b24d1-attachment.png", "type": "image/png"}, {"name": "click_create_new_customer_icon", "source": "a4fc65e7-1bf6-4069-b71d-6921e66fb12f-attachment.png", "type": "image/png"}, {"name": "above details capture screenshort", "source": "5549b56b-71e8-445f-aa6f-62d1e42e995a-attachment.png", "type": "image/png"}], "start": 1715245088551, "stop": 1715245142010, "uuid": "cc22aa97-afcb-4989-9c34-d8cf0b568c53", "historyId": "ee5cea4a028037182ab0a7631ade7d95", "testCaseId": "ee5cea4a028037182ab0a7631ade7d95", "fullName": "ezi_backend_automation.test_partner_automation#test_user_flow", "labels": [{"name": "parentSuite", "value": "ezi_backend_automation"}, {"name": "suite", "value": "test_partner_automation"}, {"name": "host", "value": "Ravi"}, {"name": "thread", "value": "964-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ezi_backend_automation.test_partner_automation"}]}
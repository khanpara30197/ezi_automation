{"name": "test_user_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":60,\"value\":\"[object HTMLButtonElement] has no size and location\"}\n  (Session info: chrome=124.0.6367.201)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7819E1562+60802]\n\t(No symbol) [0x00007FF78195AC62]\n\t(No symbol) [0x00007FF781817CE4]\n\t(No symbol) [0x00007FF78181DE26]\n\t(No symbol) [0x00007FF7818201DB]\n\t(No symbol) [0x00007FF781820280]\n\t(No symbol) [0x00007FF78186DC9D]\n\t(No symbol) [0x00007FF78186CF56]\n\t(No symbol) [0x00007FF7818B430B]\n\t(No symbol) [0x00007FF78188AB7A]\n\t(No symbol) [0x00007FF7818AA224]\n\t(No symbol) [0x00007FF78188A923]\n\t(No symbol) [0x00007FF781858FEC]\n\t(No symbol) [0x00007FF781859C21]\n\tGetHandleVerifier [0x00007FF781CE41FD+3217949]\n\tGetHandleVerifier [0x00007FF781D26197+3488183]\n\tGetHandleVerifier [0x00007FF781D1F11F+3459391]\n\tGetHandleVerifier [0x00007FF781A9B926+823622]\n\t(No symbol) [0x00007FF781965FFF]\n\t(No symbol) [0x00007FF781960F24]\n\t(No symbol) [0x00007FF7819610B2]\n\t(No symbol) [0x00007FF781951904]\n\tBaseThreadInitThunk [0x00007FFAD400257D+29]\n\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]", "trace": "def test_user_flow():\n        # Initialize the WebDriver (change the driver path as needed)\n        driver = webdriver.Chrome()\n    \n        try:\n>           execute_test_with_maximized_screen(driver)\n\nezi_backend_automation\\test_partner_automation.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nezi_backend_automation\\test_partner_automation.py:198: in execute_test_with_maximized_screen\n    ActionChains(driver).click(click_schedules_tab).perform()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F719985750>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: {\\\\\"status\\\\\":60,\\\\\"value\\...07FF781951904]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD400257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":60,\"value\":\"[object HTMLButtonElement] has no size and location\"}\nE         (Session info: chrome=124.0.6367.201)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7819E1562+60802]\nE       \t(No symbol) [0x00007FF78195AC62]\nE       \t(No symbol) [0x00007FF781817CE4]\nE       \t(No symbol) [0x00007FF78181DE26]\nE       \t(No symbol) [0x00007FF7818201DB]\nE       \t(No symbol) [0x00007FF781820280]\nE       \t(No symbol) [0x00007FF78186DC9D]\nE       \t(No symbol) [0x00007FF78186CF56]\nE       \t(No symbol) [0x00007FF7818B430B]\nE       \t(No symbol) [0x00007FF78188AB7A]\nE       \t(No symbol) [0x00007FF7818AA224]\nE       \t(No symbol) [0x00007FF78188A923]\nE       \t(No symbol) [0x00007FF781858FEC]\nE       \t(No symbol) [0x00007FF781859C21]\nE       \tGetHandleVerifier [0x00007FF781CE41FD+3217949]\nE       \tGetHandleVerifier [0x00007FF781D26197+3488183]\nE       \tGetHandleVerifier [0x00007FF781D1F11F+3459391]\nE       \tGetHandleVerifier [0x00007FF781A9B926+823622]\nE       \t(No symbol) [0x00007FF781965FFF]\nE       \t(No symbol) [0x00007FF781960F24]\nE       \t(No symbol) [0x00007FF7819610B2]\nE       \t(No symbol) [0x00007FF781951904]\nE       \tBaseThreadInitThunk [0x00007FFAD400257D+29]\nE       \tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: JavascriptException"}, "attachments": [{"name": "siteload", "source": "d2d61b18-09bf-46b1-9c0e-7973c2d2951e-attachment.png", "type": "image/png"}, {"name": "click_login_button", "source": "f593028e-e985-4fb6-b2e5-817fa810864e-attachment.png", "type": "image/png"}, {"name": "email and password", "source": "1e791560-a252-43f2-ad77-34cb73da1073-attachment.png", "type": "image/png"}, {"name": "after login", "source": "cb891f13-1b41-4a9c-bf22-6ec222104f54-attachment.png", "type": "image/png"}, {"name": "click_employee drawer", "source": "bc77ad5e-1e3e-4bf6-b034-71f777cb0d38-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "0157d6d1-51e4-40ac-bcfd-a3c4a54ea7d2-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "bc58cbd2-3342-4a7a-bd88-c08e0133ecfc-attachment.png", "type": "image/png"}, {"name": "click_customer_button", "source": "8b89611a-908d-4c39-8b5c-17dff26aa98b-attachment.png", "type": "image/png"}, {"name": "click_importer_button", "source": "69e5ff1e-a199-4ae1-b02f-58dd994aedec-attachment.png", "type": "image/png"}, {"name": "click_download_button", "source": "819613c4-71b5-444c-ad3e-9a0d258f51a6-attachment.png", "type": "image/png"}, {"name": "click_client button", "source": "569230b1-2825-4e92-affc-ed794e0d5f67-attachment.png", "type": "image/png"}, {"name": "search_partner_name", "source": "705f886e-0724-4f08-8eea-ed182906b7e0-attachment.png", "type": "image/png"}, {"name": "click_search_name", "source": "ea69c008-6da7-4159-810d-d8504d8badfe-attachment.png", "type": "image/png"}, {"name": " click_rendez_vous", "source": "986dbe90-769b-42b2-ae89-ffcd436008fb-attachment.png", "type": "image/png"}, {"name": "click_commenter", "source": "5bc56cb7-dd2f-4261-b7a6-170c477b0af5-attachment.png", "type": "image/png"}, {"name": "click_in_regards", "source": "6be6708a-8cf8-4298-aeda-6cc4433bafdc-attachment.png", "type": "image/png"}, {"name": "click_edit_customer_details", "source": "0cf858c8-c807-46fe-a304-aad4bb3d3852-attachment.png", "type": "image/png"}, {"name": "click_lastname_box", "source": "8e3e2d9b-820f-41e4-b27d-2ce13cba10f0-attachment.png", "type": "image/png"}, {"name": "click_date0fbirth_box", "source": "6a66f337-e87e-411c-a9e0-75ffe024a6ce-attachment.png", "type": "image/png"}, {"name": "click_profile_updatebutton", "source": "25b198a1-6a9c-426e-8d46-0e7a651a2dd9-attachment.png", "type": "image/png"}, {"name": "click_back_arrow", "source": "4cba85d0-7703-412d-a7dc-6ad620e65cd0-attachment.png", "type": "image/png"}, {"name": "click_create_new_customer_icon", "source": "1bb4bb55-c9fb-4f46-8952-b139e916913b-attachment.png", "type": "image/png"}, {"name": "above details capture screenshort", "source": "d4d7385f-8b42-4afe-9690-f409869a4e31-attachment.png", "type": "image/png"}, {"name": "gendar select", "source": "113409bd-26c8-4313-974f-948515435c1b-attachment.png", "type": "image/png"}, {"name": "city select", "source": "45d16d71-7656-4529-a661-57dff2a56b10-attachment.png", "type": "image/png"}, {"name": "additional information", "source": "75af995f-2c56-4be0-96ad-f52e027c85e2-attachment.png", "type": "image/png"}, {"name": "click_add_and_invite", "source": "2d4509a8-9313-4706-8d6f-6c8334a00ab7-attachment.png", "type": "image/png"}, {"name": " click_staff_icon", "source": "e5f338e3-fd82-40f9-8baa-6c23095da0ff-attachment.png", "type": "image/png"}, {"name": "click_second_name", "source": "e5d8d826-3eff-4f1f-9509-ca54828e1b71-attachment.png", "type": "image/png"}], "start": 1715513853731, "stop": 1715513953545, "uuid": "ded37467-8edd-4abc-8ac2-54bf9034aa08", "historyId": "ee5cea4a028037182ab0a7631ade7d95", "testCaseId": "ee5cea4a028037182ab0a7631ade7d95", "fullName": "ezi_backend_automation.test_partner_automation#test_user_flow", "labels": [{"name": "parentSuite", "value": "ezi_backend_automation"}, {"name": "suite", "value": "test_partner_automation"}, {"name": "host", "value": "Ravi"}, {"name": "thread", "value": "4748-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ezi_backend_automation.test_partner_automation"}]}
{"name": "test_user_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=124.0.6367.119)\nStacktrace:\n\tGetHandleVerifier [0x00007FF640471572+60802]\n\t(No symbol) [0x00007FF6403EAC72]\n\t(No symbol) [0x00007FF6402A7B13]\n\t(No symbol) [0x00007FF6402F8052]\n\t(No symbol) [0x00007FF6402EAE8B]\n\t(No symbol) [0x00007FF64031AB7A]\n\t(No symbol) [0x00007FF6402EA7C6]\n\t(No symbol) [0x00007FF64031AD90]\n\t(No symbol) [0x00007FF64033A224]\n\t(No symbol) [0x00007FF64031A923]\n\t(No symbol) [0x00007FF6402E8FEC]\n\t(No symbol) [0x00007FF6402E9C21]\n\tGetHandleVerifier [0x00007FF64077420D+3217949]\n\tGetHandleVerifier [0x00007FF6407B61A7+3488183]\n\tGetHandleVerifier [0x00007FF6407AF12F+3459391]\n\tGetHandleVerifier [0x00007FF64052B936+823622]\n\t(No symbol) [0x00007FF6403F600F]\n\t(No symbol) [0x00007FF6403F0F34]\n\t(No symbol) [0x00007FF6403F10C2]\n\t(No symbol) [0x00007FF6403E1914]\n\tBaseThreadInitThunk [0x00007FFAD400257D+29]\n\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]", "trace": "def test_user_flow():\n        # Initialize the WebDriver (change the driver path as needed)\n        driver = webdriver.Chrome()\n    \n        try:\n>           execute_test_with_maximized_screen(driver)\n\nezi_backend_automation\\test_partner_automation.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nezi_backend_automation\\test_partner_automation.py:130: in execute_test_with_maximized_screen\n    click_commenter=driver.find_element(By.XPATH,\"//div[@id='v-pills-1']//button[@id='pills-Commentaires-tab']\").click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C355A85910>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6403E1914]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD400257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=124.0.6367.119)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF640471572+60802]\nE       \t(No symbol) [0x00007FF6403EAC72]\nE       \t(No symbol) [0x00007FF6402A7B13]\nE       \t(No symbol) [0x00007FF6402F8052]\nE       \t(No symbol) [0x00007FF6402EAE8B]\nE       \t(No symbol) [0x00007FF64031AB7A]\nE       \t(No symbol) [0x00007FF6402EA7C6]\nE       \t(No symbol) [0x00007FF64031AD90]\nE       \t(No symbol) [0x00007FF64033A224]\nE       \t(No symbol) [0x00007FF64031A923]\nE       \t(No symbol) [0x00007FF6402E8FEC]\nE       \t(No symbol) [0x00007FF6402E9C21]\nE       \tGetHandleVerifier [0x00007FF64077420D+3217949]\nE       \tGetHandleVerifier [0x00007FF6407B61A7+3488183]\nE       \tGetHandleVerifier [0x00007FF6407AF12F+3459391]\nE       \tGetHandleVerifier [0x00007FF64052B936+823622]\nE       \t(No symbol) [0x00007FF6403F600F]\nE       \t(No symbol) [0x00007FF6403F0F34]\nE       \t(No symbol) [0x00007FF6403F10C2]\nE       \t(No symbol) [0x00007FF6403E1914]\nE       \tBaseThreadInitThunk [0x00007FFAD400257D+29]\nE       \tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "siteload", "source": "9b51d2b2-7fd0-4096-bcbd-4113b239f7c7-attachment.png", "type": "image/png"}, {"name": "click_login_button", "source": "863ea8c6-a155-42c9-a777-61a17aabab78-attachment.png", "type": "image/png"}, {"name": "email and password", "source": "7fa69f13-8af7-44da-8818-5ed301ef50af-attachment.png", "type": "image/png"}, {"name": "after login", "source": "452266fe-e236-451a-88fc-cd07ffbbd4bb-attachment.png", "type": "image/png"}, {"name": "click_employee drawer", "source": "23a8463b-16ac-4002-9a2b-b3608e25f22f-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "1b6c3c1c-6e55-45e9-b4ee-c065aea7d157-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "14fe79ae-79e7-4aee-8ec8-f8d9461f4be6-attachment.png", "type": "image/png"}, {"name": "click_customer_button", "source": "2907d99c-bc9e-49b0-96bd-0574fb632fa2-attachment.png", "type": "image/png"}, {"name": "click_importer_button", "source": "ce0e37a5-291a-4677-b8d1-848feec42aad-attachment.png", "type": "image/png"}, {"name": "click_download_button", "source": "f82a0f94-cada-4003-8c35-f2bc92a5f9a7-attachment.png", "type": "image/png"}, {"name": "click_client button", "source": "86cd2797-7ee7-4bad-9013-a9521fb8a689-attachment.png", "type": "image/png"}, {"name": "search_partner_name", "source": "4b71aead-a6cf-40c2-87db-47242e3b8713-attachment.png", "type": "image/png"}, {"name": "click_search_name", "source": "0627db79-ca06-415a-89ba-8fc23bd56968-attachment.png", "type": "image/png"}, {"name": " click_rendez_vous", "source": "ff0137df-ff5f-4045-b5b4-a6922515d3f9-attachment.png", "type": "image/png"}], "start": 1715189209976, "stop": 1715189259283, "uuid": "db7b671c-42f9-47b3-87c6-55b832f45958", "historyId": "ee5cea4a028037182ab0a7631ade7d95", "testCaseId": "ee5cea4a028037182ab0a7631ade7d95", "fullName": "ezi_backend_automation.test_partner_automation#test_user_flow", "labels": [{"name": "parentSuite", "value": "ezi_backend_automation"}, {"name": "suite", "value": "test_partner_automation"}, {"name": "host", "value": "Ravi"}, {"name": "thread", "value": "10752-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ezi_backend_automation.test_partner_automation"}]}
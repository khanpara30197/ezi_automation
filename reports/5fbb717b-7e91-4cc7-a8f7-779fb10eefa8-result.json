{"name": "test_user_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=124.0.6367.201)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6D4441562+60802]\n\t(No symbol) [0x00007FF6D43BAC62]\n\t(No symbol) [0x00007FF6D4277B13]\n\t(No symbol) [0x00007FF6D42C8052]\n\t(No symbol) [0x00007FF6D42BAE8B]\n\t(No symbol) [0x00007FF6D42EAB7A]\n\t(No symbol) [0x00007FF6D42BA7C6]\n\t(No symbol) [0x00007FF6D42EAD90]\n\t(No symbol) [0x00007FF6D430A224]\n\t(No symbol) [0x00007FF6D42EA923]\n\t(No symbol) [0x00007FF6D42B8FEC]\n\t(No symbol) [0x00007FF6D42B9C21]\n\tGetHandleVerifier [0x00007FF6D47441FD+3217949]\n\tGetHandleVerifier [0x00007FF6D4786197+3488183]\n\tGetHandleVerifier [0x00007FF6D477F11F+3459391]\n\tGetHandleVerifier [0x00007FF6D44FB926+823622]\n\t(No symbol) [0x00007FF6D43C5FFF]\n\t(No symbol) [0x00007FF6D43C0F24]\n\t(No symbol) [0x00007FF6D43C10B2]\n\t(No symbol) [0x00007FF6D43B1904]\n\tBaseThreadInitThunk [0x00007FFAD400257D+29]\n\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]", "trace": "def test_user_flow():\n        # Initialize the WebDriver (change the driver path as needed)\n        driver = webdriver.Chrome()\n    \n        try:\n>           execute_test_with_maximized_screen(driver)\n\nezi_backend_automation\\test_partner_automation.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nezi_backend_automation\\test_partner_automation.py:197: in execute_test_with_maximized_screen\n    click_schedules_tab=driver.find_element(By.ID,\"pills-Emplois-tab\").click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000224C15D2550>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6D43B1904]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD400257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=124.0.6367.201)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6D4441562+60802]\nE       \t(No symbol) [0x00007FF6D43BAC62]\nE       \t(No symbol) [0x00007FF6D4277B13]\nE       \t(No symbol) [0x00007FF6D42C8052]\nE       \t(No symbol) [0x00007FF6D42BAE8B]\nE       \t(No symbol) [0x00007FF6D42EAB7A]\nE       \t(No symbol) [0x00007FF6D42BA7C6]\nE       \t(No symbol) [0x00007FF6D42EAD90]\nE       \t(No symbol) [0x00007FF6D430A224]\nE       \t(No symbol) [0x00007FF6D42EA923]\nE       \t(No symbol) [0x00007FF6D42B8FEC]\nE       \t(No symbol) [0x00007FF6D42B9C21]\nE       \tGetHandleVerifier [0x00007FF6D47441FD+3217949]\nE       \tGetHandleVerifier [0x00007FF6D4786197+3488183]\nE       \tGetHandleVerifier [0x00007FF6D477F11F+3459391]\nE       \tGetHandleVerifier [0x00007FF6D44FB926+823622]\nE       \t(No symbol) [0x00007FF6D43C5FFF]\nE       \t(No symbol) [0x00007FF6D43C0F24]\nE       \t(No symbol) [0x00007FF6D43C10B2]\nE       \t(No symbol) [0x00007FF6D43B1904]\nE       \tBaseThreadInitThunk [0x00007FFAD400257D+29]\nE       \tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "siteload", "source": "9ed67c41-f242-42e2-90ed-507a1ceade59-attachment.png", "type": "image/png"}, {"name": "click_login_button", "source": "e2556c47-a102-46aa-a203-95ad1a7c32be-attachment.png", "type": "image/png"}, {"name": "email and password", "source": "bf62508a-759a-4195-9db7-e6288ba3291a-attachment.png", "type": "image/png"}, {"name": "after login", "source": "d7016720-d383-4dff-97a7-a95751d14993-attachment.png", "type": "image/png"}, {"name": "click_employee drawer", "source": "70506dcc-0e23-4f8b-8d03-c592a8d04c06-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "673f5048-fda4-40d3-ab22-f0ec7de9a087-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "d6c4bc4c-a702-4621-be41-e6500fc6d846-attachment.png", "type": "image/png"}, {"name": "click_customer_button", "source": "ae9fa683-e6d7-447d-8f85-958ecacbad29-attachment.png", "type": "image/png"}, {"name": "click_importer_button", "source": "9588dd88-8d0a-4df7-bfaa-3da728f2489e-attachment.png", "type": "image/png"}, {"name": "click_download_button", "source": "9ff8760a-1a3a-4222-986a-6d7d4a82f427-attachment.png", "type": "image/png"}, {"name": "click_client button", "source": "26144e93-ae19-4b67-b1ed-3f1403b4623b-attachment.png", "type": "image/png"}, {"name": "search_partner_name", "source": "256879b2-e9c1-4572-841c-8d507496d9a6-attachment.png", "type": "image/png"}, {"name": "click_search_name", "source": "28c22359-6014-4e08-ad4e-9b2a3347b029-attachment.png", "type": "image/png"}, {"name": " click_rendez_vous", "source": "c0cf9aa9-db9f-46ed-b581-80212fc671f8-attachment.png", "type": "image/png"}, {"name": "click_commenter", "source": "2b3d4337-e612-4793-8527-e384e11af7e1-attachment.png", "type": "image/png"}, {"name": "click_in_regards", "source": "4a53d073-c87f-4151-8c83-9cbbf943deda-attachment.png", "type": "image/png"}, {"name": "click_edit_customer_details", "source": "e0e03c6b-3508-448a-acaf-9a094abb9cc9-attachment.png", "type": "image/png"}, {"name": "click_lastname_box", "source": "468271b6-e1d9-4397-9659-1f456a9673a0-attachment.png", "type": "image/png"}, {"name": "click_date0fbirth_box", "source": "0abc4ede-297d-46f5-949e-74be33b42af3-attachment.png", "type": "image/png"}, {"name": "click_profile_updatebutton", "source": "397fb1f9-58ca-4afe-a688-65d7d98793f7-attachment.png", "type": "image/png"}, {"name": "click_back_arrow", "source": "cc1d794a-5a95-4dd5-be4d-46901fc15f00-attachment.png", "type": "image/png"}, {"name": "click_create_new_customer_icon", "source": "442570d1-f02f-4aa3-ac8d-eafc4c2d955c-attachment.png", "type": "image/png"}, {"name": "above details capture screenshort", "source": "78db5e77-8843-4e39-8571-c749ef1a641e-attachment.png", "type": "image/png"}, {"name": "gendar select", "source": "bb03ab93-894b-461d-9417-88dd47bf26f0-attachment.png", "type": "image/png"}, {"name": "city select", "source": "bc3a4555-b3ec-4fc1-a538-b5001563cf82-attachment.png", "type": "image/png"}, {"name": "additional information", "source": "2068f21a-9377-4ea6-b919-ff2035fe1e2a-attachment.png", "type": "image/png"}, {"name": "click_add_and_invite", "source": "9f904919-aca2-4c90-961b-24f0ce9bb202-attachment.png", "type": "image/png"}, {"name": " click_staff_icon", "source": "1ea33ded-bdf9-4d60-afdb-38e40a71a549-attachment.png", "type": "image/png"}, {"name": "click_second_name", "source": "6c931e89-574c-4577-bb51-701627ea9ec2-attachment.png", "type": "image/png"}], "start": 1715513182978, "stop": 1715513294244, "uuid": "c156a22b-b1b3-4c7a-be0a-93080786023e", "historyId": "ee5cea4a028037182ab0a7631ade7d95", "testCaseId": "ee5cea4a028037182ab0a7631ade7d95", "fullName": "ezi_backend_automation.test_partner_automation#test_user_flow", "labels": [{"name": "parentSuite", "value": "ezi_backend_automation"}, {"name": "suite", "value": "test_partner_automation"}, {"name": "host", "value": "Ravi"}, {"name": "thread", "value": "26528-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ezi_backend_automation.test_partner_automation"}]}
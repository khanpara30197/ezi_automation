{"name": "test_user_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1424, -217)\n  (Session info: chrome=124.0.6367.201)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F5A81562+60802]\n\t(No symbol) [0x00007FF6F59FAC62]\n\t(No symbol) [0x00007FF6F58B7CE4]\n\t(No symbol) [0x00007FF6F590E877]\n\t(No symbol) [0x00007FF6F590C344]\n\t(No symbol) [0x00007FF6F590980A]\n\t(No symbol) [0x00007FF6F59089E2]\n\t(No symbol) [0x00007FF6F58FAE8B]\n\t(No symbol) [0x00007FF6F592AB7A]\n\t(No symbol) [0x00007FF6F58FA7C6]\n\t(No symbol) [0x00007FF6F592AD90]\n\t(No symbol) [0x00007FF6F594A224]\n\t(No symbol) [0x00007FF6F592A923]\n\t(No symbol) [0x00007FF6F58F8FEC]\n\t(No symbol) [0x00007FF6F58F9C21]\n\tGetHandleVerifier [0x00007FF6F5D841FD+3217949]\n\tGetHandleVerifier [0x00007FF6F5DC6197+3488183]\n\tGetHandleVerifier [0x00007FF6F5DBF11F+3459391]\n\tGetHandleVerifier [0x00007FF6F5B3B926+823622]\n\t(No symbol) [0x00007FF6F5A05FFF]\n\t(No symbol) [0x00007FF6F5A00F24]\n\t(No symbol) [0x00007FF6F5A010B2]\n\t(No symbol) [0x00007FF6F59F1904]\n\tBaseThreadInitThunk [0x00007FFAD400257D+29]\n\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]", "trace": "def test_user_flow():\n        # Initialize the WebDriver (change the driver path as needed)\n        driver = webdriver.Chrome()\n    \n        try:\n>           execute_test_with_maximized_screen(driver)\n\nezi_backend_automation\\test_partner_automation.py:197: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nezi_backend_automation\\test_partner_automation.py:147: in execute_test_with_maximized_screen\n    click_profile_updatebutton=driver.find_element(By.CLASS_NAME,\"btn.btn-primary.Enregistrer_btn.bg-blue.profile_submit\").click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000019290F55910>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6F59F1904]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD400257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1424, -217)\nE         (Session info: chrome=124.0.6367.201)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6F5A81562+60802]\nE       \t(No symbol) [0x00007FF6F59FAC62]\nE       \t(No symbol) [0x00007FF6F58B7CE4]\nE       \t(No symbol) [0x00007FF6F590E877]\nE       \t(No symbol) [0x00007FF6F590C344]\nE       \t(No symbol) [0x00007FF6F590980A]\nE       \t(No symbol) [0x00007FF6F59089E2]\nE       \t(No symbol) [0x00007FF6F58FAE8B]\nE       \t(No symbol) [0x00007FF6F592AB7A]\nE       \t(No symbol) [0x00007FF6F58FA7C6]\nE       \t(No symbol) [0x00007FF6F592AD90]\nE       \t(No symbol) [0x00007FF6F594A224]\nE       \t(No symbol) [0x00007FF6F592A923]\nE       \t(No symbol) [0x00007FF6F58F8FEC]\nE       \t(No symbol) [0x00007FF6F58F9C21]\nE       \tGetHandleVerifier [0x00007FF6F5D841FD+3217949]\nE       \tGetHandleVerifier [0x00007FF6F5DC6197+3488183]\nE       \tGetHandleVerifier [0x00007FF6F5DBF11F+3459391]\nE       \tGetHandleVerifier [0x00007FF6F5B3B926+823622]\nE       \t(No symbol) [0x00007FF6F5A05FFF]\nE       \t(No symbol) [0x00007FF6F5A00F24]\nE       \t(No symbol) [0x00007FF6F5A010B2]\nE       \t(No symbol) [0x00007FF6F59F1904]\nE       \tBaseThreadInitThunk [0x00007FFAD400257D+29]\nE       \tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "siteload", "source": "b716cdc4-8d14-4894-9562-5d8b4fb74bfd-attachment.png", "type": "image/png"}, {"name": "click_login_button", "source": "9a441b29-6381-41a4-84a8-b7b72fe23b4e-attachment.png", "type": "image/png"}, {"name": "email and password", "source": "9d2cf91f-419c-47da-b413-23f5dc042b00-attachment.png", "type": "image/png"}, {"name": "after login", "source": "8400496d-f436-4b79-be9a-650273da195c-attachment.png", "type": "image/png"}, {"name": "click_employee drawer", "source": "464d52d5-e588-4f51-9141-23496d91c52c-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "da21fa77-4bba-445a-bdbe-4cac6b9ba0e6-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "940e1eaa-717a-462d-9bf1-94bb7ec1d9f0-attachment.png", "type": "image/png"}, {"name": "click_customer_button", "source": "b73f16dd-0b3a-4576-957d-4d633c22c970-attachment.png", "type": "image/png"}, {"name": "click_importer_button", "source": "35652227-4cdd-4d1f-86f8-739e836344ce-attachment.png", "type": "image/png"}, {"name": "click_download_button", "source": "2fbdbb94-56ac-4f0b-9b5c-bbfd50fbcf8e-attachment.png", "type": "image/png"}, {"name": "click_client button", "source": "c3502168-d9d6-491a-821f-c33f63d7b8f5-attachment.png", "type": "image/png"}, {"name": "search_partner_name", "source": "40e4bbc2-e7b1-4a39-9c21-57380f679bb8-attachment.png", "type": "image/png"}, {"name": "click_search_name", "source": "dd3d820b-2e51-45cb-9285-ac386f36deb8-attachment.png", "type": "image/png"}, {"name": " click_rendez_vous", "source": "fde4d7e1-46b2-4913-a4ac-ce8c2c723e43-attachment.png", "type": "image/png"}, {"name": "click_commenter", "source": "ad5c9579-33a3-4ef3-8db8-3d3684b92166-attachment.png", "type": "image/png"}, {"name": "click_in_regards", "source": "7798ade2-6cce-4dfc-ac88-60a2c5d0c9d5-attachment.png", "type": "image/png"}, {"name": "click_edit_customer_details", "source": "0c3f3cff-2914-4010-9601-cb40b7e57bd9-attachment.png", "type": "image/png"}, {"name": "click_lastname_box", "source": "379ace8a-d52f-4779-9e6b-adb9ee187021-attachment.png", "type": "image/png"}, {"name": "click_date0fbirth_box", "source": "a19fa19f-5e6f-4657-a976-e7f5b99bfe5a-attachment.png", "type": "image/png"}], "start": 1715492403912, "stop": 1715492493474, "uuid": "8c3c9ffc-427f-4b10-9055-e4e690cecb1d", "historyId": "ee5cea4a028037182ab0a7631ade7d95", "testCaseId": "ee5cea4a028037182ab0a7631ade7d95", "fullName": "ezi_backend_automation.test_partner_automation#test_user_flow", "labels": [{"name": "parentSuite", "value": "ezi_backend_automation"}, {"name": "suite", "value": "test_partner_automation"}, {"name": "host", "value": "Ravi"}, {"name": "thread", "value": "15924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ezi_backend_automation.test_partner_automation"}]}
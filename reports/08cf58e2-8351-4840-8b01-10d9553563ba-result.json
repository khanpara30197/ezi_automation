{"name": "test_user_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=124.0.6367.201)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7E6071562+60802]\n\t(No symbol) [0x00007FF7E5FEAC62]\n\t(No symbol) [0x00007FF7E5EA7B13]\n\t(No symbol) [0x00007FF7E5EF8052]\n\t(No symbol) [0x00007FF7E5EEAE8B]\n\t(No symbol) [0x00007FF7E5F1AB7A]\n\t(No symbol) [0x00007FF7E5EEA7C6]\n\t(No symbol) [0x00007FF7E5F1AD90]\n\t(No symbol) [0x00007FF7E5F3A224]\n\t(No symbol) [0x00007FF7E5F1A923]\n\t(No symbol) [0x00007FF7E5EE8FEC]\n\t(No symbol) [0x00007FF7E5EE9C21]\n\tGetHandleVerifier [0x00007FF7E63741FD+3217949]\n\tGetHandleVerifier [0x00007FF7E63B6197+3488183]\n\tGetHandleVerifier [0x00007FF7E63AF11F+3459391]\n\tGetHandleVerifier [0x00007FF7E612B926+823622]\n\t(No symbol) [0x00007FF7E5FF5FFF]\n\t(No symbol) [0x00007FF7E5FF0F24]\n\t(No symbol) [0x00007FF7E5FF10B2]\n\t(No symbol) [0x00007FF7E5FE1904]\n\tBaseThreadInitThunk [0x00007FFAD400257D+29]\n\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]", "trace": "def test_user_flow():\n        # Initialize the WebDriver (change the driver path as needed)\n        driver = webdriver.Chrome()\n    \n        try:\n>           execute_test_with_maximized_screen(driver)\n\nezi_backend_automation\\test_partner_automation.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nezi_backend_automation\\test_partner_automation.py:258: in execute_test_with_maximized_screen\n    click_selectall_checkbox = driver.find_element(By.CLASS_NAME, \"form-check-input.me-1.selectAll\").click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002049A1FF590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF7E5FE1904]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD400257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=124.0.6367.201)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7E6071562+60802]\nE       \t(No symbol) [0x00007FF7E5FEAC62]\nE       \t(No symbol) [0x00007FF7E5EA7B13]\nE       \t(No symbol) [0x00007FF7E5EF8052]\nE       \t(No symbol) [0x00007FF7E5EEAE8B]\nE       \t(No symbol) [0x00007FF7E5F1AB7A]\nE       \t(No symbol) [0x00007FF7E5EEA7C6]\nE       \t(No symbol) [0x00007FF7E5F1AD90]\nE       \t(No symbol) [0x00007FF7E5F3A224]\nE       \t(No symbol) [0x00007FF7E5F1A923]\nE       \t(No symbol) [0x00007FF7E5EE8FEC]\nE       \t(No symbol) [0x00007FF7E5EE9C21]\nE       \tGetHandleVerifier [0x00007FF7E63741FD+3217949]\nE       \tGetHandleVerifier [0x00007FF7E63B6197+3488183]\nE       \tGetHandleVerifier [0x00007FF7E63AF11F+3459391]\nE       \tGetHandleVerifier [0x00007FF7E612B926+823622]\nE       \t(No symbol) [0x00007FF7E5FF5FFF]\nE       \t(No symbol) [0x00007FF7E5FF0F24]\nE       \t(No symbol) [0x00007FF7E5FF10B2]\nE       \t(No symbol) [0x00007FF7E5FE1904]\nE       \tBaseThreadInitThunk [0x00007FFAD400257D+29]\nE       \tRtlUserThreadStart [0x00007FFAD5E4AA48+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "siteload", "source": "5a02ca40-9fdf-4dc0-9204-f7631ae86860-attachment.png", "type": "image/png"}, {"name": "click_login_button", "source": "c2adb337-53e8-4537-a519-4dab7c0a0cd5-attachment.png", "type": "image/png"}, {"name": "email and password", "source": "ce104ac1-57de-442d-8071-e3ab55a646f7-attachment.png", "type": "image/png"}, {"name": "after login", "source": "cce3dd12-93b2-468b-a15d-d78aafffdd20-attachment.png", "type": "image/png"}, {"name": "click_employee drawer", "source": "5cb51e10-4dcd-47e5-9188-bd7aa47b6a56-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "346d47d3-838a-456b-a0e6-4db793b95ca8-attachment.png", "type": "image/png"}, {"name": "select_employee_name", "source": "824357a0-5968-4d7c-8098-7ed6a7a2476a-attachment.png", "type": "image/png"}, {"name": " click_staff_icon", "source": "24cd5f8e-430d-4746-8739-a36950b1382f-attachment.png", "type": "image/png"}, {"name": "click_second_name", "source": "d7d14bb5-da91-4e50-9774-68ad704212ce-attachment.png", "type": "image/png"}, {"name": "click_schedules_tab", "source": "a321db86-9228-42f5-a4ca-cd0aac1c5d9b-attachment.png", "type": "image/png"}, {"name": "click_absendse", "source": "4415f1a7-a367-4c97-bac5-c3114926bd99-attachment.png", "type": "image/png"}, {"name": "click_edit_staff_button", "source": "10dff55d-21ca-4c9d-a285-e2e60ee58f34-attachment.png", "type": "image/png"}, {"name": "click_assignservice", "source": "a129737b-a030-48c6-87c7-681fdedf6e17-attachment.png", "type": "image/png"}, {"name": "click_service_search_box", "source": "7ea7d912-8f57-49e3-9df7-702d6eaceec8-attachment.png", "type": "image/png"}, {"name": "click_cancel_button", "source": "4c680bd9-da1d-4221-a7e2-d8875b3fb4c9-attachment.png", "type": "image/png"}, {"name": "click_emploisdutemps", "source": "d92678ff-09c9-4e52-95f9-33e1acede629-attachment.png", "type": "image/png"}, {"name": "click_changethetimetable", "source": "56c7800c-6ef2-4447-8e8a-4dc7f0294032-attachment.png", "type": "image/png"}, {"name": "click_cancel_icon", "source": "b903af1e-13bb-44fd-afc5-8249096ced2b-attachment.png", "type": "image/png"}, {"name": "click_absence", "source": "f7e524fc-0554-4915-9c4a-20c459bcf0e0-attachment.png", "type": "image/png"}, {"name": "click_add_another_absense", "source": "9e52ffe3-5f51-4af0-8b0b-6ebcd5e34128-attachment.png", "type": "image/png"}, {"name": "absence_popup_cancel_icon_click", "source": "03f50515-5117-48b3-a8c0-47f643e4239a-attachment.png", "type": "image/png"}, {"name": "commission tab", "source": "a9bdbed5-13ea-4f1e-a1c6-7047543dcf95-attachment.png", "type": "image/png"}, {"name": "click_select_member_dropdown", "source": "fcdedfa9-2323-4437-ac46-7543ec57e26a-attachment.png", "type": "image/png"}, {"name": "unit_drawer_click", "source": "5b4aa11b-3a20-424c-a420-fa54cc0d55de-attachment.png", "type": "image/png"}, {"name": "click_apply_section_button", "source": "df5d643c-447f-478b-ba0b-4ac4364f7cb5-attachment.png", "type": "image/png"}, {"name": "click_cancel_button_in_commision", "source": "d5a67db5-68c6-4cc6-93f7-d242ea39bec1-attachment.png", "type": "image/png"}, {"name": "click_commission_second_style", "source": "c0fe16df-d01c-4201-9839-157820ed3628-attachment.png", "type": "image/png"}], "start": 1715532763620, "stop": 1715532844090, "uuid": "a92259a3-b3b7-42d3-9e2c-0e27b15721b8", "historyId": "ee5cea4a028037182ab0a7631ade7d95", "testCaseId": "ee5cea4a028037182ab0a7631ade7d95", "fullName": "ezi_backend_automation.test_partner_automation#test_user_flow", "labels": [{"name": "parentSuite", "value": "ezi_backend_automation"}, {"name": "suite", "value": "test_partner_automation"}, {"name": "host", "value": "Ravi"}, {"name": "thread", "value": "16108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ezi_backend_automation.test_partner_automation"}]}